{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","helpers.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","cn","TodoList","todos","map","getMaxId","length","Math","max","getUser","userId","usersFromServer","find","preparedTodoList","App","useState","setTodos","setTitle","hasTitleError","setHasTitleError","select","setSelect","hasSelectError","setHasSelectError","hasAllFields","trim","action","method","type","placeholder","value","onChange","event","target","handleTitle","required","defaultValue","disabled","onClick","preventDefault","newTodo","currentTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9628043a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({\n  user: {\n    email,\n    name,\n  },\n}) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${email}`}\n  >\n    {name}\n  </a>\n);\n","import cn from 'classnames';\n\nimport { Todo } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    id,\n    title,\n    completed = false,\n    user,\n  },\n}) => (\n  <article\n    data-id={id}\n    className={cn(\n      'TodoInfo', { 'TodoInfo--completed': completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {title}\n    </h2>\n\n    {user\n      && <UserInfo user={user} />}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n\n);\n","import { Todo } from './types';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const getMaxId = (todos: Todo[]) => {\n  if (todos.length === 0) {\n    return 1;\n  }\n\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n};\n\nexport const getUser = (userId: number) => {\n  const requiredUser = usersFromServer.find(user => (\n    user.id === userId\n  ));\n\n  return requiredUser;\n};\n\nexport const preparedTodoList: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport { TodoList } from './components/TodoList';\nimport { getMaxId, getUser, preparedTodoList } from './helpers';\nimport { Todo } from './types';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(preparedTodoList);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [select, setSelect] = useState(0);\n  const [hasSelectError, setHasSelectError] = useState(false);\n\n  const handleTitle = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setSelect(+event.target.value);\n    setHasSelectError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setHasTitleError(false);\n\n    setSelect(0);\n    setHasSelectError(false);\n  };\n\n  const hasAllFields = title.trim() && select;\n\n  const handleChange = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasSelectError(!select);\n    setHasTitleError(!title);\n\n    if (!hasAllFields) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: getMaxId(todos),\n      title,\n      completed: false,\n      userId: select,\n      user: getUser(select),\n    };\n\n    setTodos(currentTodo => (\n      [...currentTodo, newTodo]\n    ));\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\">\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter title\"\n            value={title}\n            onChange={(event) => handleTitle(event)}\n            required\n          />\n          {hasTitleError\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={select}\n            defaultValue={0}\n            onChange={handleSelect}\n            required\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasSelectError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleChange}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={todos}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}